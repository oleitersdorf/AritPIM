
def serialSaveLog(header, comments, inputs, outputs, log, filename):
    """
    Constructs and saves a log for the given execution
    :param header: the header row for the file
    :param comments: the comments for the function
    :param inputs: the list of inputs as a map (key = input name, value = input cells as numpy array)
    :param outputs: the list of outputs as a map (key = output name, value = output cells as numpy array)
    :param log: the log generated by the simulator (list of strings)
    :param filename: the filename to store the result in
    """

    file = open(filename, "w")

    file.write(header)
    file.write("\n")
    file.write(comments)
    file.write("\n\n")
    file.write("Inputs:\n")
    for input_name, input_arr in inputs.items():
        file.write(f"\t {input_name} ({len(input_arr)}-bit): ")
        for x in input_arr:
            file.write(f"{x} ")
        file.write("\n")
    file.write("Outputs:\n")
    for output_name, output_arr in outputs.items():
        file.write(f"\t {output_name} ({len(output_arr)}-bit): ")
        for x in output_arr:
            file.write(f"{x} ")
        file.write("\n")
    file.write("\n")
    file.write('\n'.join(log))
    file.close()


def parallelSaveLog(header, comments, inputs, outputs, log, filename):
    """
    Constructs and saves a log for the given execution
    :param header: the header row for the file
    :param comments: the comments for the function
    :param inputs: the list of inputs as a map (key = input name, value = input cells as numpy array)
    :param outputs: the list of outputs as a map (key = output name, value = output cells as numpy array)
    :param log: the log generated by the simulator (list of strings)
    :param filename: the filename to store the result in
    """

    file = open(filename, "w")

    file.write(header)
    file.write("\n")
    file.write(comments)
    file.write("\n\n")
    file.write("Inputs:\n")
    for input_name, (input_loc, partitions) in inputs.items():
        file.write(f"\t {input_name} ({len(partitions)}-bit): bit {input_loc} of partitions ")
        for x in partitions:
            file.write(f"{x} ")
        file.write("\n")
    file.write("Outputs:\n")
    for output_name, (output_loc, partitions) in outputs.items():
        file.write(f"\t {output_name} ({len(partitions)}-bit): bit {output_loc} of partitions ")
        for x in partitions:
            file.write(f"{x} ")
        file.write("\n")
    file.write("\n")
    file.write('\n'.join(log))
    file.close()
